/*
 * Qdrant API
 *
 * API description for Qdrant vector search engine.  This document describes CRUD and search operations on collections of points (vectors with payload).  Qdrant supports any combinations of `should`, `must` and `must_not` conditions, which makes it possible to use in applications when object could not be described solely by vector. It could be location features, availability flags, and other custom properties businesses should take into account. ## Examples This examples cover the most basic use-cases - collection creation and basic vector search. ### Create collection First - let's create a collection with dot-production metric. ``` curl -X PUT 'http://localhost:6333/collections/test_collection' \\   -H 'Content-Type: application/json' \\   --data-raw '{     \"vectors\": {       \"size\": 4,       \"distance\": \"Dot\"     }   }'  ``` Expected response: ``` {     \"result\": true,     \"status\": \"ok\",     \"time\": 0.031095451 } ``` We can ensure that collection was created: ``` curl 'http://localhost:6333/collections/test_collection' ``` Expected response: ``` {   \"result\": {     \"status\": \"green\",     \"vectors_count\": 0,     \"segments_count\": 5,     \"disk_data_size\": 0,     \"ram_data_size\": 0,     \"config\": {       \"params\": {         \"vectors\": {           \"size\": 4,           \"distance\": \"Dot\"         }       },       \"hnsw_config\": {         \"m\": 16,         \"ef_construct\": 100,         \"full_scan_threshold\": 10000       },       \"optimizer_config\": {         \"deleted_threshold\": 0.2,         \"vacuum_min_vector_number\": 1000,         \"max_segment_number\": 5,         \"memmap_threshold\": 50000,         \"indexing_threshold\": 20000,         \"flush_interval_sec\": 1       },       \"wal_config\": {         \"wal_capacity_mb\": 32,         \"wal_segments_ahead\": 0       }     }   },   \"status\": \"ok\",   \"time\": 2.1199e-05 } ```  ### Add points Let's now add vectors with some payload: ``` curl -L -X PUT 'http://localhost:6333/collections/test_collection/points?wait=true' \\ -H 'Content-Type: application/json' \\ --data-raw '{   \"points\": [     {\"id\": 1, \"vector\": [0.05, 0.61, 0.76, 0.74], \"payload\": {\"city\": \"Berlin\"}},     {\"id\": 2, \"vector\": [0.19, 0.81, 0.75, 0.11], \"payload\": {\"city\": [\"Berlin\", \"London\"] }},     {\"id\": 3, \"vector\": [0.36, 0.55, 0.47, 0.94], \"payload\": {\"city\": [\"Berlin\", \"Moscow\"] }},     {\"id\": 4, \"vector\": [0.18, 0.01, 0.85, 0.80], \"payload\": {\"city\": [\"London\", \"Moscow\"] }},     {\"id\": 5, \"vector\": [0.24, 0.18, 0.22, 0.44], \"payload\": {\"count\": [0]}},     {\"id\": 6, \"vector\": [0.35, 0.08, 0.11, 0.44]}   ] }' ``` Expected response: ``` {     \"result\": {         \"operation_id\": 0,         \"status\": \"completed\"     },     \"status\": \"ok\",     \"time\": 0.000206061 } ``` ### Search with filtering Let's start with a basic request: ``` curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\ -H 'Content-Type: application/json' \\ --data-raw '{     \"vector\": [0.2,0.1,0.9,0.7],     \"top\": 3 }' ``` Expected response: ``` {     \"result\": [         { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },         { \"id\": 1, \"score\": 1.273, \"payload\": null, \"version\": 0 },         { \"id\": 3, \"score\": 1.208, \"payload\": null, \"version\": 0 }     ],     \"status\": \"ok\",     \"time\": 0.000055785 } ``` But result is different if we add a filter: ``` curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\ -H 'Content-Type: application/json' \\ --data-raw '{     \"filter\": {         \"should\": [             {                 \"key\": \"city\",                 \"match\": {                     \"value\": \"London\"                 }             }         ]     },     \"vector\": [0.2, 0.1, 0.9, 0.7],     \"top\": 3 }' ``` Expected response: ``` {     \"result\": [         { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },         { \"id\": 2, \"score\": 0.871, \"payload\": null, \"version\": 0 }     ],     \"status\": \"ok\",     \"time\": 0.000093972 } ``` 
 *
 * The version of the OpenAPI document: v1.7.x
 * Contact: andrey@vasnetsov.com
 * Generated by: https://openapi-generator.tech
 */

/// CreateCollection : Operation for creating new collection and (optionally) specify index params



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateCollection {
    #[serde(rename = "vectors", skip_serializing_if = "Option::is_none")]
    pub vectors: Option<Box<crate::models::VectorsConfig>>,
    /// For auto sharding: Number of shards in collection. - Default is 1 for standalone, otherwise equal to the number of nodes - Minimum is 1 For custom sharding: Number of shards in collection per shard group. - Default is 1, meaning that each shard key will be mapped to a single shard - Minimum is 1
    #[serde(rename = "shard_number", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub shard_number: Option<Option<i32>>,
    #[serde(rename = "sharding_method", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sharding_method: Option<Option<crate::models::ShardingMethod>>,
    /// Number of shards replicas. Default is 1 Minimum is 1
    #[serde(rename = "replication_factor", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub replication_factor: Option<Option<i32>>,
    /// Defines how many replicas should apply the operation for us to consider it successful. Increasing this number will make the collection more resilient to inconsistencies, but will also make it fail if not enough replicas are available. Does not have any performance impact.
    #[serde(rename = "write_consistency_factor", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub write_consistency_factor: Option<Option<i32>>,
    /// If true - point's payload will not be stored in memory. It will be read from the disk every time it is requested. This setting saves RAM by (slightly) increasing the response time. Note: those payload values that are involved in filtering and are indexed - remain in RAM.
    #[serde(rename = "on_disk_payload", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub on_disk_payload: Option<Option<bool>>,
    #[serde(rename = "hnsw_config", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hnsw_config: Option<Option<Box<crate::models::HnswConfigDiff>>>,
    #[serde(rename = "wal_config", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub wal_config: Option<Option<Box<crate::models::WalConfigDiff>>>,
    #[serde(rename = "optimizers_config", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub optimizers_config: Option<Option<Box<crate::models::OptimizersConfigDiff>>>,
    #[serde(rename = "init_from", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub init_from: Option<Option<Box<crate::models::InitFrom>>>,
    #[serde(rename = "quantization_config", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub quantization_config: Option<Option<Box<crate::models::QuantizationConfig>>>,
    /// Sparse vector data config.
    #[serde(rename = "sparse_vectors", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sparse_vectors: Option<Option<::std::collections::HashMap<String, crate::models::SparseVectorParams>>>,
}

impl Default for CreateCollection {
    fn default() -> Self {
        Self::new()
    }
}

impl CreateCollection {
    /// Operation for creating new collection and (optionally) specify index params
    pub fn new() -> CreateCollection {
        CreateCollection {
            vectors: None,
            shard_number: None,
            sharding_method: None,
            replication_factor: None,
            write_consistency_factor: None,
            on_disk_payload: None,
            hnsw_config: None,
            wal_config: None,
            optimizers_config: None,
            init_from: None,
            quantization_config: None,
            sparse_vectors: None,
        }
    }
}


